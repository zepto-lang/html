(module "html"
  (export
    (list "doctype" doctype)
    (list "build" build)
    (list "with-skeleton" with-skeleton)
    (list "parse" parse))

  (implicit ["meta" "img" "input" "br" "hr" "frame" "area" "base" "basefont"
             "col" "isindex" "link" "param" "html" "head" "body" "p" "dt"
             "dd" "li" "option" "thead" "th" "tbody" "tr" "td" "tfoot" "colgroup"])
  (empty-acc #{:tags () :text ""})

  (doctype (lambda x
    (if (null? x)
      "<!DOCTYPE html>"
      (++ "<!DOCTYPE " (car x) ">"))))

  (parse (lambda (str)
    (define (add-to-tags hash tag)
      (hash:update hash :tags (lambda (tags) (++ tags tag))))
    (define (add-to-text hash text)
      (hash:update hash :text (lambda (t) (++ t text))))
    (define (make-tag tag content subtags attributes)
      (make-hash :name tag :text content :tags subtags :attributes attributes))
    (define (split-attrs tag-contents parsed)
      (if (string:empty? tag-contents)
        parsed
        (let ((quoted (string:find tag-contents #\"))
              (whitespace (string:find tag-contents #\space)))
        (if (< quoted whitespace)
          (let ((sep (add1 
                  (+
                    (string:find
                      (substring tag-contents (add1 quoted) (length tag-contents)) #\") quoted))))
            (if (eq? sep 0)
              :err-quote-mismatch
              (split-attrs (substring tag-contents (add1 sep) (length tag-contents))
                           (++ parsed (substring tag-contents 0 (add1 sep))))))
          (if (eq? whitespace -1)
            (++ parsed tag-contents)
            (if (eq? whitespace 0)
              (split-attrs (substring tag-contents (add1 whitespace) (length tag-contents))
                           parsed)
              (split-attrs (substring tag-contents (add1 whitespace) (length tag-contents))
                           (++ parsed (substring tag-contents 0 whitespace)))))))))
    (define (parse-self-closing tag)
      (let* ((attrs (split-attrs tag []))
             (tname (car attrs))
             (pairs
              (make-hash
                (map
                  (lambda (x) 
                    (let* ((split (string:split x "=\""))
                           (val (cadr split)))
                      (list (car split) (substring val 0 (sub1 (length val))))))
                  (cdr attrs)))))
      (make-tag tname "" [] pairs)))
    (define (internal str pos acc)
      (if (string:empty? str)
        acc
        (cond
          ((string:starts-with str "<!--")
            (let ((index (string:find str "-->")))
              (if (eq? index -1)
                acc
                (internal (substring str index (length str)) (+ pos index) acc))))
          ((string:starts-with str "<!")
            (if (eq? acc empty-acc)
              (let ((index (string:find str ">")))
                (if (eq? index -1)
                  (begin
                    (error "html:parse" "Unclosed meta tag at pos" pos)
                    :err-unclosed-meta)
                  (internal (substring str index (length str)) (+ pos index)
                            (add-to-tags acc
                                    (let ((split (string:split (substring str 2 index) #\space)))
                                      (if (= (length split) 1)
                                        (make-tag (car split) "" [] #{})
                                        (make-tag (car split) (cadr split) [] #{})))))))))
          ((string:starts-with str "<")
            (let ((index (string:find str ">")))
              (if (eq? index -1)
                (begin
                  (error "html:parse" "Unclosed tag at pos" pos)
                  :err-unclosed-tag)
                (if (eq? (string:ref str (sub1 index)) #\/)
                  (internal (substring str (add1 index) (length str)) (+ pos index)
                            (add-to-tags (add-to-text acc (++ "{" (->string (length (acc :tags))) "}"))
                                         (parse-self-closing (substring str 1 (sub1 index)))))
                   (let* ((tag (parse-self-closing (substring str 1 index)))
                          (closing (++ "</" (tag :name) ">"))
                          (rest (substring str (add1 index) (length str)))
                          (cindex (string:find rest closing)))
                    (if (eq? cindex -1)
                      (if (in? implicit (string:lower-case (tag :name)))
                        '()
                        (begin
                          (error "html:parse" "Tag at pos" pos "has no closing tag")
                          :err-unclosed-tag))
                      (internal (substring rest (+ cindex (length closing)) (length rest))
                                (+ pos index cindex (length closing))
                                (add-to-tags (add-to-text acc
                                                          (++ "{" (->string (length (acc :tags))) "}"))
                                             (internal (substring str (add1 index)
                                                                  (+ (add1 index) cindex))
                                                       (+ pos index 1)
                                                       tag)))))))))
          (else
            (let ((index (string:find str "<")))
              (if (eq? index -1)
                (add-to-text acc str)
                (internal (substring str index (length str)) (+ pos index)
                          (add-to-text acc (substring str 0 index)))))))))
    (internal (string:remove-newlines str) 0 empty-acc)))

  (build (lambda (m)
    (define (_build h)
      (define (destructure hash)
        (if (nil? hash)
          ""
          (hash:keys-reduce (lambda (acc x) (++ acc " " x "=\"" (hash x) "\"")) "" hash)))
      (define (fill template tags)
        (cond
          ((string:empty? template)
            (reduce ++ "" tags))
          ((null? tags)
            template)
          (else
            (let loop ((template template)
                       (el (car tags))
                       (tags (cdr tags))
                       (index 0))
              (let* ((i (string:find template (++ "{" (->string index) "}")))
                     (template (++ (substring template 0 i)
                                   el
                                   (substring template (+ i 3) (length template)))))
                (if (null? tags)
                  template
                  (loop template (car tags) (cdr tags) (add1 index))))))))
      (let* ((tag (get-from h :name ""))
             (attrs (destructure (h :attributes)))
             (tags (get-from h :tags [])))
        (++ "<" tag attrs ">"
            (fill (get-from h :text "") (map _build tags))
            "</" tag ">")))
    (cond
      ((string? m) m)
      ((number? m) (number->string m))
      ((hash-map? m) (reduce (lambda (acc x) (++ (_build x))) "" (m :tags)))
      (else :no))))

    (with-skeleton (lambda contents
      (if (null? contents)
        #{:tags (#{:name "html"
                   :tags (#{:name "head"}
                          #{:name "body"})})}
        (let* ((hash (car contents))
               (tags (++ []
                         (if (truthy? (hash :head)) (hash:set (hash :head) :name "head") [])
                         (if (truthy? (hash :body)) (hash:set (hash :body) :name "body") []))))
          (make-hash :tags
            (list
              (make-hash :name "html"
                         :tags tags))))))))
